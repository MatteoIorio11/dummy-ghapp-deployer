---
name: Create Lambda

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    environment: deployment
    name: Build, publish, release, and announce
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Install node 16
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: npm

      - name: Configure git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
      - name: Configure aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install project modules
        run: npm ci --production

      - name: Create lambda archive
        run: zip -r function.zip .

      - name: Create the role
        run: > 
          aws iam create-role --role-name ghapp-role --assume-role-policy-document '{"Version": "2012-10-17","Statement": [{ "Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}' 
      
      - name: Attach the AWSLambdaBasicExecutionRole policy 
        run: >
          aws iam attach-role-policy --role-name ghapp-role --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

      - name: Create lambda function
        run: >
          arn_role=$(aws iam get-role --role-name ghapp-role --query "Role.Arn" --output text)
          aws lambda create-function --function-name ${{ secrets.LAMBDA_FUNCTION }} \
          --zip-file fileb://function.zip \
          --handler handler.webhooks \
          --runtime nodejs16.x \
          --role $arn_role \
          --environment "Variables={APP_ID=${{ secrets.AWS_GHAPP_ID}},PRIVATE_KEY=${{ secrets.AWS_GHAPP_PRIVATE_KEY }},WEBHOOK_SECRET=${{ secrets.AWS_GHAPP_WEBHOOK_SECRET }}}"
      
      - name: Wait for function to be created
        run: aws lambda wait function-exists --function-name ${{ secrets.LAMBDA_FUNCTION }}

      - name: Get the arn of the created function and create the api for the trigger
        run: |
            arn=$(aws lambda get-function --function-name ${{ secrets.LAMBDA_FUNCTION }} --query "Configuration.FunctionArn" --output text)
            aws apigatewayv2 create-api --name ${{ secrets.AWS_API_NAME}} --protocol-type HTTP --target $arn
      